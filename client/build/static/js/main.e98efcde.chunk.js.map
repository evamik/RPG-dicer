{"version":3,"sources":["components/roll-dice.js","components/rolls.js","App.js","index.js"],"names":["RollDice","props","onChangeUsername","bind","onChangeDescription","onChangeRollCount","onChangeRollSize","onChangeRollBonus","onChangeResult","onSubmit","onChangeOwnDice","state","username","description","rollCount","rollSize","rollResult","rollBonus","date","Date","R","G","B","ownDice","e","this","setState","target","value","val","checked","size","length","result","i","Math","round","random","console","log","roll","getHours","getMinutes","getSeconds","socket","emit","io","window","location","hostname","fetch","then","response","json","res","ip","ip_array","split","catch","err","className","style","width","type","required","onChange","onClick","Component","Roll","color","Rolls","rolls","on","rll","slice","map","currentroll","key","_id","rollList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e98efcde.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\nimport io from 'socket.io-client'\r\n\r\nexport default class RollDice extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeDescription = this.onChangeDescription.bind(this);\r\n        this.onChangeRollCount = this.onChangeRollCount.bind(this);\r\n        this.onChangeRollSize = this.onChangeRollSize.bind(this);\r\n        this.onChangeRollBonus = this.onChangeRollBonus.bind(this);\r\n        this.onChangeResult = this.onChangeResult.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChangeOwnDice = this.onChangeOwnDice.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            description: '',\r\n            rollCount: 1,\r\n            rollSize: 20,\r\n            rollResult: 0,\r\n            rollBonus: 0,\r\n            date: new Date(),\r\n            R: 0,\r\n            G: 0,\r\n            B: 0,\r\n            ownDice: false\r\n        }\r\n    }\r\n\r\n    onChangeUsername(e){\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n    }\r\n    \r\n    onChangeDescription(e){\r\n        this.setState({\r\n            description: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeRollCount(e){\r\n        let val = e.target.value;\r\n        if(val < 1)\r\n            val = 1;\r\n\r\n        this.setState({\r\n            rollCount: val\r\n        })\r\n    }\r\n\r\n    onChangeRollSize(e){\r\n        let val = e.target.value;\r\n        if(val < 1)\r\n            val = 1;\r\n\r\n        this.setState({\r\n            rollSize: val\r\n        })\r\n    }\r\n\r\n    onChangeRollBonus(e){\r\n        this.setState({\r\n            rollBonus: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeResult(e){\r\n        this.setState({\r\n            rollResult: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeOwnDice(e){\r\n        this.setState({\r\n            ownDice: e.target.checked\r\n        })\r\n    }\r\n\r\n    onSubmit(size) {\r\n        if(this.state.username.length === 0)\r\n            return\r\n\r\n        let result = 0;\r\n\r\n        for(var i = 0; i < this.state.rollCount; i++) {\r\n            result += Math.round( 1 + Math.random() * (size-1));\r\n        }\r\n        result += Math.round(this.state.rollBonus)\r\n\r\n        console.log(this.state.ownDice)\r\n\r\n        if(this.state.ownDice === true)\r\n            result = this.state.rollResult\r\n\r\n        const roll = {\r\n            username: this.state.username,\r\n            description: this.state.description,\r\n            rollCount: this.state.rollCount,\r\n            rollSize: size,\r\n            rollResult: result,\r\n            rollBonus: this.state.rollBonus,\r\n            date: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n            R: this.state.R,\r\n            G: this.state.G,\r\n            B: this.state.B,\r\n            ownDice: this.state.ownDice\r\n        }\r\n\r\n        this.socket.emit('roll', roll)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.socket = io(`${window.location.hostname}:5000`);\r\n\r\n        fetch(\"https://api.ipify.org?format=json\")\r\n        .then(response => {\r\n            return response.json();\r\n        }, \"jsonp\")\r\n        .then(res => {\r\n            console.log(res.ip);\r\n            const ip_array = res.ip.split('.')      // Returns array of the string above separated by \".\". [\"::ffff:192\",\"168\",\"0\",\"1\"]\r\n\r\n            // The switch statement checks the value of the array above for the index of 2. This would be \"0\"\r\n            this.setState({\r\n                R: ip_array[0],\r\n                G: ip_array[1],\r\n                B: ip_array[3],\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"\">\r\n                <h3>Roll your dice!</h3>\r\n                <div className=\"row flex-wrap align-items-end\">\r\n                    <div className=\"px-2\" style={{width: 250}}>\r\n                        <label className=\"mb-0\">Player: </label>\r\n                        <input type=\"text\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.username}\r\n                            onChange={this.onChangeUsername}\r\n                        />\r\n                    </div>\r\n                    <div className=\"px-2\" style={{width: 400}}>\r\n                        <label className=\"mb-0\">Rolling for: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.description}\r\n                            onChange={this.onChangeDescription}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row flex-wrap align-items-end\">\r\n                    <div className=\"pl-2\" style={{width: 75}}>\r\n                        <label className=\"mb-0\">count:</label>\r\n                        <input type=\"number\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.rollCount}\r\n                            onChange={this.onChangeRollCount}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-1 pr-3\">d</div>\r\n                    <div className=\"mb-1\">+</div>\r\n                    <div className=\"\" style={{width: 90}}>\r\n                        <label className=\"mb-0\">bonus:</label>\r\n                        <input type=\"number\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.rollBonus}\r\n                            onChange={this.onChangeRollBonus}\r\n                        />\r\n                    </div>\r\n                    <div className=\"ml-5\" style={{width: 150}}>\r\n                        <label className=\"mb-0\">my own dice result:</label>\r\n                        <input type=\"number\"\r\n                            className=\"form-control\"\r\n                            value={this.state.rollResult}\r\n                            onChange={this.onChangeResult}\r\n                        />\r\n                    </div>\r\n                    <div className=\"ml-2\">\r\n                        <input type=\"checkbox\" value={this.state.ownDice} \r\n                        onChange={this.onChangeOwnDice}/>\r\n                        <label className=\"pl-1\">use my dice result</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-end p-2\">\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(4)} \r\n                        className=\"btn btn-primary\">d4</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(6)} \r\n                        className=\"btn btn-primary\">d6</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(8)} \r\n                        className=\"btn btn-primary\">d8</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(10)} \r\n                        className=\"btn btn-primary\">d10</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(12)} \r\n                        className=\"btn btn-primary\">d12</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(20)} \r\n                        className=\"btn btn-primary\">d20</button>\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(100)} \r\n                        className=\"btn btn-primary\">d100</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-end px-2\">\r\n                    <div className=\"pr-2\" style={{width: 100}}>\r\n                        <label className=\"mb-0\">custom size:</label>\r\n                        <input type=\"number\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.rollSize}\r\n                            onChange={this.onChangeRollSize}\r\n                        />\r\n                    </div>\r\n                    <div className=\"pr-2\">\r\n                        <button onClick={() => this.onSubmit(this.state.rollSize)} \r\n                        className=\"btn btn-primary\">submit</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport io from 'socket.io-client'\r\n\r\nconst Roll = props => (\r\n    <tr>\r\n        <td><a style={{color: `rgb(${props.roll.R}, ${props.roll.G}, ${props.roll.B})`}}>llll </a>{props.roll.date}</td>\r\n        <td>{props.roll.username}</td>\r\n        <td>{`${props.roll.rollCount}d${props.roll.rollSize}+${props.roll.rollBonus} ${props.roll.ownDice ? '(own dice)' : ''}`}</td>\r\n        <td>{props.roll.rollResult}</td>\r\n        <td>{props.roll.description}</td>\r\n    </tr>\r\n)\r\n\r\nclass Rolls extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {rolls: []};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.socket = io(`${window.location.hostname}:5000`);\r\n\r\n        this.socket.on('init', (rll) => {\r\n            this.setState((state) => ({\r\n                rolls: [...state.rolls, ...rll]\r\n            }))\r\n        })\r\n\r\n        this.socket.on('push', (rll) => {\r\n            this.setState((state) => ({\r\n                rolls: [...state.rolls.slice(1), rll]\r\n            }));\r\n          });\r\n    }\r\n\r\n    rollList() {\r\n        return this.state.rolls.map(currentroll => {\r\n            return <Roll roll={currentroll} key={currentroll._id}/>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Rolls log</h3>\r\n                <table className=\"table\">\r\n                <thead className=\"thead-light\">\r\n                    <tr>\r\n                    <th></th>\r\n                    <th>Username</th>\r\n                    <th>roll type</th>\r\n                    <th>rolled</th>\r\n                    <th>rolled for</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { this.rollList() }\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rolls;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport RollDice from './components/roll-dice';\nimport Rolls from './components/rolls';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Rolls/>\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}